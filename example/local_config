# shellcheck disable=SC2148

# Development mode for developing / testing the script
# Add dev password to base user
# Should be 0 in production
export DEV_MODE=1

# Are we running the script locally for testing?
# Or is the script run in the correct directory?
# Should be 1 for this local testing the script, 0 in the pipeline execution
export LOCAL_MODE=1

# Supported OS: raspbian, raspios, ubuntu18, ubuntu20
export IMAGE_OS='ubuntu20'

# For QEMU available archs: aarch64, arm, armeb, i386, x86_64
export IMAGE_ARCH='aarch64'

# General file name for image versioning file
# Needed to transfer the version between the scripts and cloud <-> device
export IMAGE_VER_FILE='image_version'

# The version to be started from in case no previous version exists
# NOTE: This version is incremented once before the final value is used
# Current: if minor == 9 && rev == 99 => major + 1, minor=0, rev=0
# Meaning initial version: 0.99.9 => 1.0.0
export INITIAL_VERSION='0.9.99'

# Thresholds to bump the greater version part
# E.g. if rev == REV_MAX => minor += 1, rev = 0
# if minor == MINOR_MAX => major += 1, minor = 0, rev = 0
export MINOR_MAX=9
export REV_MAX=99

# Image params file. Contains essential info as exported variables about the image
# Used by the scripts to share info and image rootfs for provisioning
export IMAGE_PARAMS_FILE='image_params'

# Patched image file name to sync create and publish image script vars
export DEST_IMG_FILE='patched.img'

# Set to 1 for fetching current version from configured Azure File Share
export VERSION_FROM_SHARE=1

# Read/List access SAS token for update image file share
# Image names will be in format: OS_TYPE-OS_ARCH_YYYY-MM-DD_VERSION.img.xz
# Retrieved from Azure Portal -> Storage Account -> Data storage -> File shares -> Open file share -> Properties -> URL
export IMAGE_SERVER_URL='https://<FILESHARE>.file.core.windows.net/<SHAREPATH>'

# Retrieved from Azure Portal -> Storage Account -> Security + Networking -> Shared access signature
# -> Select services=file resources=service,container,object permissions=read,list end-expiry=future-date proto=https-only key=any -> Generate -> Copy SAS Token field
export SAS_TOKEN_URL_QUERY='<SAS_TOKEN_URL_QUERY_PARAMS>'

# Source image OS distribution information
# export DISTRO_NAME='Raspberry Pi OS Lite - Debian 11 (Bullseye) ARM32'
# export DISTRO_VERSION='Build: 2022-01-28'

export DISTRO_NAME='Ubuntu Server ARM64'
export DISTRO_VERSION='20.04.4 LTS'

# Maintenance information
export MAINT_NAME='Some Maintainer'
export MAINT_EMAIL='some.maintainer@company.com'

# Source URL to download the original official image from

# RaspiOS Lite Arm64
# 2022-02-21: Does NOT work with Azure IoT Edge AT ALL -> RaspiOS Arm64 not supported
# export IMAGE_SRC_URL='https://downloads.raspberrypi.org/raspios_lite_arm64/images/raspios_lite_arm64-2022-01-28/2022-01-28-raspios-bullseye-arm64-lite.zip'

# RaspiOS Lite Arm32 Debian 11 Bullseye
# 2022-02-21: Does not work directly with AzIoTEdge -> Cgroups error -> Azure IoT Edge 1.2 supports Stretch, not Bullseye!!
# export IMAGE_SRC_URL='https://downloads.raspberrypi.org/raspios_lite_armhf/images/raspios_lite_armhf-2022-01-28/2022-01-28-raspios-bullseye-armhf-lite.zip'

# RaspiOS Arm32 WITH desktop env
# 2022-03-04: Unnecessarily large image, if desktop environment is not explicitly required, this image should not be selected!
# export IMAGE_SRC_URL='https://downloads.raspberrypi.org/raspios_armhf/images/raspios_armhf-2022-01-28/2022-01-28-raspios-bullseye-armhf.zip'

# Ubuntu Server 18.04.5 LTS ARM64 Preinstalled for Raspberry Pi 3
# 2022-02-22: Does not work AT ALL -> DOES NOT BOOT (KERNEL PANIC)
# export IMAGE_SRC_URL='https://cdimage.ubuntu.com/releases/18.04/release/ubuntu-18.04.5-preinstalled-server-arm64+raspi3.img.xz'

# Ubuntu Server 20.04.4 LTS ARM64 Preinstalled Raspi 3/4
export IMAGE_SRC_URL='https://cdimage.ubuntu.com/releases/20.04/release/ubuntu-20.04.4-preinstalled-server-arm64+raspi.img.xz'

# Expand the image root filesystem?
# NOTE: RaspiOS has rootfs shrunk to 0% free space (100% of partition space used), 
# thus expanding the partition is mandatory!
# Also NOTE: this will affect the total size of the image file making it larger!
# Ensure that the image will fit in the target SD card
export EXPAND_ROOTFS=1

# How many megabytes the image root filesystem partition is expanded?
# At least ~1 gbyte (1024 mbytes) is recommended to fit in
# necessary IoT edge runtime & tools.
export EXPAND_SIZE_MBYTES=1536

# Do we want to create a partition for persistent data onto the disk image?
# It will be created as the second partition (rootfs will be moved to third partition)
export USE_PERSISTENCE=1

# How many megabytes for the persistence partition at the end of the disk?
# It should be large enough to hold all needed persistent configurations and data
# The partition will be 100% of the allocated space, if 1024 defined here, the size will be 1024 mbytes.
export PERSISTENCE_SIZE_MBYTES=1024

# In which location the persistence partition will be mounted on during boot
# This location will be configured in the /etc/fstab file.
export PERSISTENCE_MOUNT_POINT='/persistence'

# Set the primary and fallback NTP server hostnames and/or IP addresses for proper time syncing.
# Without setting these, the time might be synced from an unpredictable time sources
# (e.g. some ntp servers on the same network that are not using correct or designed time).
# NOTE: Ensure the hostnames or IP addresses are available and reachable during the provisioning process.
# For example servers, see e.g. https://www.ntppool.org/
export NTP_SERVERS='<SPACE_SEPARATED_NTP_SERVERS>'
export FALLBACK_NTP_SERVERS='<SPACE_SEPARATED_FALLBACK_NTP_SERVERS>'

# Use the following SSID and credentials to authenticate into a WLAN access point.
# Should be always set (required), even though not used to generate the configuration files properly.
# Fallbacks to Ethernet DHCP connection in case cannot connect to the WLAN spcecified access point.
# Should NOT be used BOTH wired Ethernet AND WLAN access point SIMULTANEOUSLY.
export WLAN_SSID='<WLAN_SSID>'
export WLAN_PASSWORD='<WLAN_PASSWORD>'

# Set the device designed country.
# Where is the device physcially located?
export COUNTRYCODE_UPPER_2LETTER='<COUNTRYCODE_UPPER_2LETTER>'

# Set the physical keyboard etc. system locale country code.
# What keyboard layout the device should use?
export LOCALE_LOWER_2LETTER='<LOCALE_LOWER_2LETTER>'

# Local system hostname for the device.
# NOTE: Is NOT same as the network hostname (DNS name)
export DEVICE_HOSTNAME='<DEVICE_HOSTNAME>'

# Device timezone to set clock to
# What is the current timezone in the device location?
# If timezone needed to be UTC 0, could be set to UTC
# Otherwsie the format is: Continent/City
export TIMEZONE='<TIMEZONE>'

# User name for the created user
# Set to EMPTY string or remove the variable if the new user should NOT be created
export BASE_USER='<BASE_SYSTEM_USER_NAME>'

# Base user local password to be set on the created user
# Set to EMPTY string or remove the variable if the password should be DISABLED for the base user
export BASE_USER_PASS='<BASE_SYSTEM_USER_PASSWORD>'

# The public SSH key to be delivered for the created user
# Set EMPTY if no specific public key wanted to be exported
export SSH_PUBLIC_KEY='<SSH_KEY_TYPE> <SSH_PUBLIC_KEY> <OPTIONAL_SSH_KEY_COMMENT>'

# Delete the original pre-made user?
# Improves security
export DEL_OG_USER=1

# Do we create a new SSH key on the local machine for later use?
# The created key will be authored for the base user created on the system image
# Set to 0 to not create a new local ssh key to be appended on the base user
export CREATE_LOCAL_SSH_KEY=1

# Configuration for generating SSH keys on the fly (only for local development runs)
# Leave keyphrase empty for no key password (NOT RECOMMENDED!)
export SSH_KEY_TYPE='ed25519'
export SSH_KEY_ROUNDS=512
export SSH_KEY_BITS=521
export SSH_KEY_PHRASE=''
export SSH_KEY_COMMENT='base-image-key'
export SSH_KEY_FILE='base_key'

# Remote mount point for Image SMB share
# Should point on a valid SMB share location, supporting SMB 3.0
export SMB_REMOTE_MOUNT_POINT='//<FILESHARE>.file.core.windows.net/<SHAREPATH>'

# Image Storage SMB Share credentials to access the share
# The User must have R/W permissions on the share at root level!
export SMB_USERNAME='<SMB_USERNAME>'
export SMB_PASSWORD='<SMB_PASSWORD>'

# All processes expect that a virtual software tpm solution is used
# A TPM simulator is built and installed on the target image
# The TPM Software stack will use tpm simulator driver instead of real one
# Change the value to 0 if using a real TPM chip
# The chosen TPM chip needs to be supported by the TPM2.0 standard, and tpm2-abrmd resource manager.
export USE_TPM_SIMULATOR=1

# Do we pre-register the TPM information (Registration ID and Endorsement Key)
# to the Azure DPS service? This will automate the registration process.
# To do it manually, the registration info must be manually fetched from the image
# and passed into the DPS service.
export RUN_TPM_ATTESTATION=1

# E.g. a directory on the persistence partition (if enabled)
# TPM state files are created into this directory on the image
# Applies only if TPM simulator is used.
# Recommended location is somewhere on the persistence partition (IF SUCH IS CREATED).
# Check PERSISTENCE_MOUNT_POINT setting for the correct persistence partition mount point.
# to ensure the tpm state is not overridden/erased during an OTA image update process.
export TPM_STATE_DEST='/persistence/vtpm'

# ID scope to link the correct DPS in Azure
# See Azure -> DPS instance -> Overview -> ID Scope for the correct value
export DPS_ID_SCOPE='0ne00000000'
